Abstraction
The process of reducing complexity to formulate generalised ideas or concepts, for example reducing a computing problem to its fundamental concepts.
Algorithm
A description of the steps and decisions required to solve a problem. For example, to find the largest number in a list of positive numbers: 
1.	Note the first number as the largest
2.	Look through the remaining numbers, in turn, and if a number is larger than the number found in 1, note it as the largest.
3.	Repeat this process until complete. The last noted number is the largest in the list.
Flowcharts are often useful in visualising an algorithm.
Binary 
The use of two states or permissible values to represent data, such as the on and off position of a light switch or the transistors in a computer silicon chip that can be in either the electrical state of ON or OFF.
Binary data are typically represented as a series of single digits referred to as binary digits (or bits) due to each taking on the value of either 0 or 1. For example, if we wanted to represent a four-colour system (e.g. CMYK - cyan, magenta, yellow, and key [black]) in binary the two-digit codes 00, 01, 10 and 11 could be used.
Branching
Branching occurs when an algorithm makes a choice to do one of two or more actions depending on sets of conditions and the data provided. 

Abstraction
The process of reducing complexity to formulate generalised ideas or concepts, for example reducing a computing problem to its fundamental concepts.
Algorithm
A description of the steps and decisions required to solve a problem. For example, to find the largest number in a list of positive numbers: 
1.	Note the first number as the largest
2.	Look through the remaining numbers, in turn, and if a number is larger than the number found in 1, note it as the largest.
3.	Repeat this process until complete. The last noted number is the largest in the list.
Flowcharts are often useful in visualising an algorithm.
Binary 
The use of two states or permissible values to represent data, such as the on and off position of a light switch or the transistors in a computer silicon chip that can be in either the electrical state of ON or OFF.
Binary data are typically represented as a series of single digits referred to as binary digits (or bits) due to each taking on the value of either 0 or 1. For example, if we wanted to represent a four-colour system (e.g. CMYK - cyan, magenta, yellow, and key [black]) in binary the two-digit codes 00, 01, 10 and 11 could be used.
Branching
Branching occurs when an algorithm makes a choice to do one of two or more actions depending on sets of conditions and the data provided. 
Abstraction
The process of reducing complexity to formulate generalised ideas or concepts, for example reducing a computing problem to its fundamental concepts.
Algorithm
A description of the steps and decisions required to solve a problem. For example, to find the largest number in a list of positive numbers: 
1.	Note the first number as the largest
2.	Look through the remaining numbers, in turn, and if a number is larger than the number found in 1, note it as the largest.
3.	Repeat this process until complete. The last noted number is the largest in the list.
Flowcharts are often useful in visualising an algorithm.
Binary 
The use of two states or permissible values to represent data, such as the on and off position of a light switch or the transistors in a computer silicon chip that can be in either the electrical state of ON or OFF.
Binary data are typically represented as a series of single digits referred to as binary digits (or bits) due to each taking on the value of either 0 or 1. For example, if we wanted to represent a four-colour system (e.g. CMYK - cyan, magenta, yellow, and key [black]) in binary the two-digit codes 00, 01, 10 and 11 could be used.
Branching
Branching occurs when an algorithm makes a choice to do one of two or more actions depending on sets of conditions and the data provided. 
Iteration
Repetition of a process or set of instructions in computer programming.
Multimedia
The use of digital systems and peripheral devices to present text, graphics, video, animation and sound in an integrated way. Examples include interactive games, media-rich websites, electronic books (eBooks) and/or animated short films.
Non-functional requirements
A set of attributes or characteristics that a solution should possess such as reliability, robustness and useability.
Object-oriented programming (OOP) language
A programming language that supports the object-oriented programming paradigm. In object-oriented programming, objects represent a combination of data (the attributes of an object) and the actions that can be performed on or with that data (the methods of the object). An example might be the declaration of a ‘car’ which has attributes that describe its physical nature (such as the number of doors, its colour, the size of the engine) and the actions it can perform (such as accelerating, braking and turning).
The valid attributes and methods of an object are defined by its class, and these attributes and methods can be inherited from the definition of another class. Examples of OOP languages include C++, Eiffel, Java, Python and Scala. 
Peripheral devices
Digital components that can be connected to a digital system but are not essential to the system, for example printer, scanner, digital camera.
Project
The set of activities undertaken by students to address specified content, involving understanding the nature of a problem, situation or need; creating, designing and producing a solution to the project task and documenting the process. Project work has a benefit, purpose and use; a user or audience who can provide feedback on the success of the solution; limitations to work within; and a real-world technologies context influenced by social, ethical and environmental issues. Project management criteria are used to judge a project’s success.
Protocols
Generally accepted standards or 'rules' that govern relationships between and within information systems.
Social protocols
Generally accepted 'rules' or behaviours when people interact in online environments, for example, using language that is not rude or offensive to particular cultures, and not divulging personal details about people without their permission.
Structured English
The use of the English language to describe the steps of an algorithm in clear, unambiguous statements that can be read from start to finish. The use of keywords, such as START, END, IF, UNTIL, 

provides a syntax similar to that of a programming language to assist with identifying logical steps necessary to properly describe the algorithm.
An example of the use of structured language can be demonstrated using the following problem:
Description of the problem:
Describing the decision a person makes about how to get to a destination based on the weather and the distance from their current location to their destination
The Structured English description can easily be translated into code using a programming language and accurately captures the logical elements that must be followed to answer the question posed.
Sustainability factors
Economic, environmental and social decisions that impact on current design decisions without compromising future needs.
Systems thinking 
A holistic approach to the identification and solving of problems where parts and components of a system, their interactions and interrelationships are analysed individually to see how they influence the functioning of the whole system. This approach enables students to understand systems and work with complexity, uncertainty and risk.
Technical protocols
A set of ‘rules’ or behaviours that involve using technical facilities to support personal safety and security of data, such as activating privacy settings and online filtering features.
User experience
Aspects that affect how an end-user interacts with digital systems, such as navigation design, expertise of user and ergonomics

User interface
The characteristics of the boundary between users and a digital system, or the manner in which users interact with digital system components (hardware and software). In software, this usually comprises of fields for text and number entry, mouse pointers, buttons and other graphical elements. In hardware, switches, dials and LEDs provide information about the interactions between the user and machine.
Validate
The process of checking that input data is reasonable such as its accuracy, consistency, completeness and bias.
Visual programming
A programming language or environment where the program is represented and created visually rather than as text. A common visual metaphor represents statements and control structures as blocks that can be composed to form programs, allowing programming without having to deal with syntax errors. Examples of visual programming languages include: Alice, GameMaker, Kodu, Lego Mindstorms, MIT App Inventor, Scratch (Build Your Own Blocks and Snap).
Note: A visual programming language should not be confused with programming languages for creating visualisations or programs with user interfaces, for example, Processing or Visual Basic.
Wireless devices
Devices that transmit and receive data from other sources over a communications medium that is not connected by electrical conductors. A common example of a wireless device is a mobile phone, which uses radio waves to connect to telecommunications towers for the purpose of communication
